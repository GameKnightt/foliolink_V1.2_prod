/*
  # Fix Stripe customers table structure

  1. Changes
    - Update stripe_customers table to use bigint for id (auto-increment)
    - Ensure proper foreign key reference to auth.users
    - Update stripe_subscriptions to use bigint for id
    - Update stripe_orders to use bigint for id
    - Fix any structural issues preventing customer mapping

  2. Security
    - Maintain existing RLS policies
    - Ensure proper foreign key constraints
*/

-- First, let's ensure the stripe_customers table has the correct structure
-- The edge function expects an auto-incrementing bigint id, not uuid

-- Drop and recreate stripe_customers with correct structure
DROP TABLE IF EXISTS public.stripe_customers CASCADE;

CREATE TABLE public.stripe_customers (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) NOT NULL,
  customer_id text UNIQUE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz
);

-- Recreate stripe_subscriptions with correct structure
DROP TABLE IF EXISTS public.stripe_subscriptions CASCADE;

CREATE TABLE public.stripe_subscriptions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id text UNIQUE NOT NULL,
  subscription_id text,
  price_id text,
  current_period_start bigint,
  current_period_end bigint,
  cancel_at_period_end boolean DEFAULT false,
  payment_method_brand text,
  payment_method_last4 text,
  status stripe_subscription_status NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz
);

-- Recreate stripe_orders with correct structure
DROP TABLE IF EXISTS public.stripe_orders CASCADE;

CREATE TABLE public.stripe_orders (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  checkout_session_id text NOT NULL,
  payment_intent_id text NOT NULL,
  customer_id text NOT NULL,
  amount_subtotal bigint NOT NULL,
  amount_total bigint NOT NULL,
  currency text NOT NULL,
  payment_status text NOT NULL,
  status stripe_order_status DEFAULT 'pending'::stripe_order_status NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz
);

-- Enable RLS
ALTER TABLE public.stripe_customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stripe_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stripe_orders ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for stripe_customers
CREATE POLICY "Users can view their own customer data"
  ON public.stripe_customers
  FOR SELECT
  TO authenticated
  USING (user_id = auth.uid() AND deleted_at IS NULL);

-- Create RLS policies for stripe_subscriptions
CREATE POLICY "Users can view their own subscription data"
  ON public.stripe_subscriptions
  FOR SELECT
  TO authenticated
  USING (customer_id IN (
    SELECT customer_id FROM public.stripe_customers 
    WHERE user_id = auth.uid() AND deleted_at IS NULL
  ) AND deleted_at IS NULL);

-- Create RLS policies for stripe_orders
CREATE POLICY "Users can view their own order data"
  ON public.stripe_orders
  FOR SELECT
  TO authenticated
  USING (customer_id IN (
    SELECT customer_id FROM public.stripe_customers 
    WHERE user_id = auth.uid() AND deleted_at IS NULL
  ) AND deleted_at IS NULL);

-- Recreate the views with correct table references
DROP VIEW IF EXISTS public.stripe_user_subscriptions;
CREATE VIEW public.stripe_user_subscriptions
WITH (security_definer = true) AS
SELECT 
  sc.customer_id,
  ss.subscription_id,
  ss.status as subscription_status,
  ss.price_id,
  ss.current_period_start,
  ss.current_period_end,
  ss.cancel_at_period_end,
  ss.payment_method_brand,
  ss.payment_method_last4
FROM public.stripe_customers sc
LEFT JOIN public.stripe_subscriptions ss ON sc.customer_id = ss.customer_id
WHERE sc.user_id = auth.uid() AND sc.deleted_at IS NULL;

DROP VIEW IF EXISTS public.stripe_user_orders;
CREATE VIEW public.stripe_user_orders
WITH (security_definer = true) AS
SELECT 
  sc.customer_id,
  so.id as order_id,
  so.checkout_session_id,
  so.payment_intent_id,
  so.amount_subtotal,
  so.amount_total,
  so.currency,
  so.payment_status,
  so.status as order_status,
  so.created_at as order_date
FROM public.stripe_customers sc
LEFT JOIN public.stripe_orders so ON sc.customer_id = so.customer_id
WHERE sc.user_id = auth.uid() AND sc.deleted_at IS NULL;